import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";
import { uploadFileToSpace } from "./uploadTos3";
import { IOffer } from "../modules/offers/offer.interface";

export const generateOfferPDF = async (offer: IOffer) => {
  try {
    // Define the local file path
    const fileName = `offer_${Date.now()}.pdf`;
    const filePath = path.join(__dirname, "..", "uploads", fileName);

    // Create the uploads folder if it doesn't exist
    if (!fs.existsSync(path.dirname(filePath))) {
      fs.mkdirSync(path.dirname(filePath), { recursive: true });
    }

    // Initialize PDFKit
    const doc = new PDFDocument({
      size: "A4",
      margin: 30,
    });

    // Write the PDF to the local file system
    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

    // Add title
    doc
      .font("Helvetica-Bold")
      .fontSize(20)
      .fillColor("#333")
      .text("Offer Agreement", { align: "center" })
      .moveDown(1);

    // Add project details
    doc
      .font("Helvetica")
      .fontSize(12)
      .fillColor("#000")
      .text(`Project Name: ${offer.projectName}`)
      .text(`Description: ${offer.description}`)
      .text(`Agreement Type: ${offer.agreementType}`)
      .text(`Total Price: $${offer.totalPrice.toFixed(2)}`)
      .moveDown(1);

    // Add specific agreement details
    if (offer.agreementType === "Flat_Fee") {
      doc
        .font("Helvetica-Bold")
        .text("Flat Fee Details")
        .font("Helvetica")
        .text(`Price: $${offer.flatFee?.price.toFixed(2)}`)
        .text(`Revisions: ${offer.flatFee?.revision}`)
        .text(`Delivery Time: ${offer.flatFee?.delivery} days`);
    } else if (offer.agreementType === "Hourly_Fee") {
      doc
        .font("Helvetica-Bold")
        .text("Hourly Fee Details")
        .font("Helvetica")
        .text(`Hourly Rate: $${offer.hourlyFee?.pricePerHour.toFixed(2)}`)
        .text(`Revisions: ${offer.hourlyFee?.revision}`)
        .text(`Delivery Time: ${offer.hourlyFee?.delivery} days`);
    } else if (offer.agreementType === "Milestone") {
      doc.font("Helvetica-Bold").text("Milestone Details").font("Helvetica");

      offer.milestones?.forEach((milestone, index) => {
        doc
          .text(`Milestone ${index + 1}: ${milestone.title}`)
          .text(`   - Price: $${milestone.price.toFixed(2)}`)
          .text(`   - Delivery Time: ${milestone.delivery} days`)
          .moveDown(0.5);
      });
    }

    // Add footer with contact details
    doc
      .moveDown(2)
      .font("Helvetica-Oblique")
      .fontSize(10)
      .fillColor("#555")
      .text(
        `Generated by ${offer.professionalEmail} for ${offer.clientEmail}`,
        { align: "center" }
      )

      .text("Thank you for your business!", { align: "center" });

    // Finalize the document
    doc.end();

    // Wait for the file to be completely written
    await new Promise((resolve, reject) => {
      writeStream.on("finish", resolve);
      writeStream.on("error", reject);
    });

    // Upload the file to DigitalOcean Spaces
    const uploadedURL = await uploadFileToSpace(
      {
        buffer: fs.readFileSync(filePath),
        originalname: fileName,
        mimetype: "application/pdf",
      },
      "offers"
    );

    // Optionally delete the local file after uploading
    fs.unlinkSync(filePath);

    return uploadedURL;
  } catch (error) {
    console.error("Error generating or uploading PDF:", error);
    throw error;
  }
};
